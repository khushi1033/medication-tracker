import {
  require_react
} from "./chunk-NTFE6N72.js";
import {
  __toESM
} from "./chunk-TWLJ45QX.js";

// node_modules/@nylas/nylas-react/lib/nylas-provider.js
var import_react = __toESM(require_react());

// node_modules/@nylas/nylas-react/lib/nylas-context.js
var React = __toESM(require_react());
var NylasContext = React.createContext(null);
var useNylas = () => React.useContext(NylasContext);
var nylas_context_default = NylasContext;

// node_modules/@nylas/nylas-js/lib/request.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Request = class {
  static get({ url, headers }) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield fetch(url, {
        method: "GET",
        headers: Object.assign(Object.assign({}, headers), { Accept: "application/json" })
      }).then(this._handleErrorResponse);
    });
  }
  static post({ url, body, headers }) {
    return __awaiter(this, void 0, void 0, function* () {
      return yield fetch(url, {
        method: "POST",
        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "application/json" }),
        body: JSON.stringify(body)
      }).then(this._handleErrorResponse);
    });
  }
  static _handleErrorResponse(response) {
    if (response.status > 299) {
      response.text().then((text) => {
        return new Error(`Error encountered during request. Status: ${response.status}. Message: ${text}`);
      });
    }
    return response;
  }
};

// node_modules/@nylas/nylas-js/lib/index.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var DefaultEndpoints;
(function(DefaultEndpoints2) {
  DefaultEndpoints2["buildAuthUrl"] = "/nylas/generate-auth-url";
  DefaultEndpoints2["exchangeCodeForToken"] = "/nylas/exchange-mailbox-token";
})(DefaultEndpoints || (DefaultEndpoints = {}));
var Nylas = class {
  constructor(props) {
    this.buildAuthUrl = (opts) => __awaiter2(this, void 0, void 0, function* () {
      const url = this.serverBaseUrl + (opts.buildAuthUrlEndpoint || DefaultEndpoints.buildAuthUrl);
      const rawResp = yield Request.post({
        url,
        body: {
          email_address: opts.emailAddress,
          success_url: opts.successRedirectUrl
        }
      });
      const authUrl = yield rawResp.text();
      if (!authUrl || authUrl.length == 0) {
        throw new Error("No auth URL was returned from the server.");
      }
      return authUrl;
    });
    this.authWithRedirect = (opts) => __awaiter2(this, void 0, void 0, function* () {
      browserCheck();
      window.location.href = yield this.buildAuthUrl(opts);
    });
    this.exchangeCodeForToken = (authorizationCode, opts) => __awaiter2(this, void 0, void 0, function* () {
      if (!authorizationCode) {
        throw new Error("No valid authorization code detected");
      }
      const url = this.serverBaseUrl + ((opts === null || opts === void 0 ? void 0 : opts.exchangeCodeForTokenEndpoint) || DefaultEndpoints.exchangeCodeForToken);
      const rawResp = yield Request.post({
        url,
        body: {
          token: authorizationCode
        }
      });
      const accessToken = yield rawResp.text();
      if (!accessToken || accessToken.length == 0) {
        throw new Error("No access token was returned from the server.");
      }
      return accessToken;
    });
    this.exchangeCodeFromUrlForToken = (opts) => __awaiter2(this, void 0, void 0, function* () {
      browserCheck();
      const authorizationCode = new URLSearchParams(window.location.search).get("code");
      return yield this.exchangeCodeForToken(authorizationCode, opts);
    });
    this.serverBaseUrl = props.serverBaseUrl;
  }
};
var browserCheck = () => {
  if (typeof window === "undefined") {
    throw new Error("You are trying to use a browser function without a browser.");
  }
};

// node_modules/@nylas/nylas-react/lib/nylas-provider.js
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var NylasProvider = (props) => {
  const { children } = props, nylasProps = __rest(props, ["children"]);
  const [client, setClient] = (0, import_react.useState)(new Nylas(nylasProps));
  const safeSetState = (state) => {
    if (client) {
      console.warn("Client already exists.");
      return;
    }
    setClient(state);
  };
  (0, import_react.useEffect)(() => {
    if (!nylasProps || !nylasProps.serverBaseUrl) {
      return;
    }
    safeSetState(new Nylas(nylasProps));
  }, [nylasProps]);
  return import_react.default.createElement(nylas_context_default.Provider, { value: client }, children);
};
var nylas_provider_default = NylasProvider;
export {
  nylas_context_default as NylasContext,
  nylas_provider_default as NylasProvider,
  useNylas
};
//# sourceMappingURL=@nylas_nylas-react.js.map
