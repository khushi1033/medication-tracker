var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useCallback, useState } from "react";
import NylasContext from "./nylas-context";
import Nylas from "@nylas/nylas-js";
const NylasContainer = (opts) => {
    const { children } = opts, nylasProps = __rest(opts, ["children"]);
    const [client] = useState(() => new Nylas(nylasProps));
    const [authState, setAuthState] = useState(false);
    const authWithRedirect = useCallback((opts) => __awaiter(void 0, void 0, void 0, function* () { return client.authWithRedirect(opts); }), [client]);
    const exchangeCodeFromUrlForToken = useCallback((opts) => __awaiter(void 0, void 0, void 0, function* () {
        const accessToken = yield client.exchangeCodeFromUrlForToken(opts);
        // if(accessToken !== false) {
        //   setAuthState(true);
        // }
        return accessToken;
    }), [client, authState]);
    return (React.createElement(NylasContext.Provider, { value: {
            client,
            authState,
            authWithRedirect,
            exchangeCodeFromUrlForToken
        } }, children));
};
export default NylasContainer;
