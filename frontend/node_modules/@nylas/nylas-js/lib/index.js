var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Request from './request';
var DefaultEndpoints;
(function (DefaultEndpoints) {
    DefaultEndpoints["buildAuthUrl"] = "/nylas/generate-auth-url";
    DefaultEndpoints["exchangeCodeForToken"] = "/nylas/exchange-mailbox-token";
})(DefaultEndpoints || (DefaultEndpoints = {}));
export default class Nylas {
    constructor(props) {
        /**
         * Builds the URL for authenticating users to your application via Hosted Authentication
         * @param opts Configuration for building the URL
         * @return URL for authentication
         * @throws If the HTTP response code is non 2xx
         * @throws If the server doesn't respond with a URL
         */
        this.buildAuthUrl = (opts) => __awaiter(this, void 0, void 0, function* () {
            const url = this.serverBaseUrl +
                (opts.buildAuthUrlEndpoint || DefaultEndpoints.buildAuthUrl);
            const rawResp = yield Request.post({
                url,
                body: {
                    email_address: opts.emailAddress,
                    success_url: opts.successRedirectUrl,
                },
            });
            const authUrl = yield rawResp.text();
            if (!authUrl || authUrl.length == 0) {
                throw new Error('No auth URL was returned from the server.');
            }
            return authUrl;
        });
        /**
         * Builds and redirects to the URL for authenticating users to your application via Hosted Authentication
         * @param opts Configuration for building the URL
         * @throws If window is not defined
         * @throws If the HTTP response code is non 2xx
         * @throws If the server doesn't respond with a URL
         */
        this.authWithRedirect = (opts) => __awaiter(this, void 0, void 0, function* () {
            browserCheck();
            window.location.href = yield this.buildAuthUrl(opts);
        });
        /**
         * Exchange the Nylas authorization code for a Nylas access token
         * @param authorizationCode Nylas authorization code
         * @param opts Configuration for the token exchange
         * @throws If no authorization code was provided
         * @throws If the HTTP response code is non 2xx
         * @throws If the server doesn't respond with an access token
         */
        this.exchangeCodeForToken = (authorizationCode, opts) => __awaiter(this, void 0, void 0, function* () {
            if (!authorizationCode) {
                throw new Error('No valid authorization code detected');
            }
            const url = this.serverBaseUrl +
                ((opts === null || opts === void 0 ? void 0 : opts.exchangeCodeForTokenEndpoint) ||
                    DefaultEndpoints.exchangeCodeForToken);
            const rawResp = yield Request.post({
                url,
                body: {
                    token: authorizationCode,
                },
            });
            const accessToken = yield rawResp.text();
            if (!accessToken || accessToken.length == 0) {
                throw new Error('No access token was returned from the server.');
            }
            return accessToken;
        });
        /**
         * Parses the URL for the Nylas authorization code for a Nylas access token
         * @param opts Configuration for the token exchange
         * @throws If window is not defined
         * @throws If no authorization code was provided
         * @throws If the HTTP response code is non 2xx
         * @throws If the server doesn't respond with an access token
         */
        this.exchangeCodeFromUrlForToken = (opts) => __awaiter(this, void 0, void 0, function* () {
            browserCheck();
            const authorizationCode = new URLSearchParams(window.location.search).get('code');
            return yield this.exchangeCodeForToken(authorizationCode, opts);
        });
        this.serverBaseUrl = props.serverBaseUrl;
    }
}
/**
 * Simple browser check
 * @throws If window is not defined
 */
const browserCheck = () => {
    if (typeof window === 'undefined') {
        throw new Error('You are trying to use a browser function without a browser.');
    }
};
