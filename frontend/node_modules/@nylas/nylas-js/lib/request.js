var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export default class Request {
    /**
     * Make a GET request
     * @param url The URL to make the GET call to
     * @param headers Additional headers to set for the call
     * @return The raw response object
     * @throws If the HTTP response code is non 2xx
     */
    static get({ url, headers }) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield fetch(url, {
                method: 'GET',
                headers: Object.assign(Object.assign({}, headers), { Accept: 'application/json' }),
            }).then(this._handleErrorResponse);
        });
    }
    /**
     * Make a POST request
     * @param url The URL to make the POST call to
     * @param body The JSON body to send
     * @param headers Additional headers to set for the call
     * @return The raw response object
     * @throws If the HTTP response code is non 2xx
     */
    static post({ url, body, headers }) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield fetch(url, {
                method: 'POST',
                headers: Object.assign(Object.assign({}, headers), { 'Content-Type': 'application/json' }),
                body: JSON.stringify(body),
            }).then(this._handleErrorResponse);
        });
    }
    /**
     * Checks if the response HTTP code is an error code, and if so, throws an error
     * @param response The raw response object
     * @throws If the HTTP response code is non 2xx
     * @private
     */
    static _handleErrorResponse(response) {
        if (response.status > 299) {
            response.text().then((text) => {
                return new Error(`Error encountered during request. Status: ${response.status}. Message: ${text}`);
            });
        }
        return response;
    }
}
